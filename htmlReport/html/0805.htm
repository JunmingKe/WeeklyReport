<!DOCTYPE html>
<!-- saved from url=(0089)file:///var/folders/1q/5dsf8tfj4fb_tpvx6f3mpzcc0000gn/T/mume11875-10424-quga0u.yplze.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>0805</title>
      
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="./0805_files/katex.min.css">
      
      
      
      
      
      
      
      
      
      

      <style> 
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */
 
      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview   ">
      <h1 class="mume-header" id="0805report">0805Report</h1>

<h5 class="mume-header" id="junmingke">JunmingKe</h5>

<h4 class="mume-header" id="check-%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9">Check 待办事项</h4>

<ol>
<li>测试每一个<code>eth_</code>开头的接口的调用格式<br>
不需要继续测试了，我已经找到了官方的<code>JSON RPC API references</code>，参考：<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#json-rpc-methods">https://github.com/ethereum/wiki/wiki/JSON-RPC#json-rpc-methods</a></li>
<li>无交易挖矿<br>
如果矿工没有交易打包，矿工可以自己发布无效交易，并打包发到网络上，随后进行挖矿，更浪费存储空间。</li>
</ol>
<h4 class="mume-header" id="%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">代码分析</h4>

<p>部署：<code>Voting</code><br>
代码地址：<code>http://solidity.readthedocs.io/en/v0.4.24/solidity-by-example.html</code></p>
<pre data-role="codeBlock" data-info="" class="language-"><code>pragma solidity ^0.4.22;
contract Ballot {
    struct Voter {
        uint weight;
        bool voted;
        address delegate;
        uint vote;
    }
    struct Proposal {
        bytes32 name;
        uint voteCount;
    }
    address public chairperson;
    mapping(address =&gt; Voter) public voters;
    Proposal[] public proposals;
    constructor(bytes32[] proposalNames) public {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
        for (uint i = 0; i &lt; proposalNames.length; i++) {
            proposals.push(Proposal({
                name: proposalNames[i],
                voteCount: 0
            }));
        }
    }
    function giveRightToVote(address voter) public {
        require(
            msg.sender == chairperson,
            "Only chairperson can give right to vote."
        );
        require(
            !voters[voter].voted,
            "The voter already voted."
        );
        require(voters[voter].weight == 0);
        voters[voter].weight = 1;
    }
    function delegate(address to) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "You already voted.");
        require(to != msg.sender, "Self-delegation is disallowed.");
        while (voters[to].delegate != address(0)) {
            to = voters[to].delegate;
            require(to != msg.sender, "Found loop in delegation.");
        }
        sender.voted = true;
        sender.delegate = to;
        Voter storage delegate_ = voters[to];
        if (delegate_.voted) {
            proposals[delegate_.vote].voteCount += sender.weight;
        } else {
            delegate_.weight += sender.weight;
        }
    }
    function vote(uint proposal) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "Already voted.");
        sender.voted = true;
        sender.vote = proposal;
        proposals[proposal].voteCount += sender.weight;
    }
    function winningProposal() public view
            returns (uint winningProposal_)
    {
        uint winningVoteCount = 0;
        for (uint p = 0; p &lt; proposals.length; p++) {
            if (proposals[p].voteCount &gt; winningVoteCount) {
                winningVoteCount = proposals[p].voteCount;
                winningProposal_ = p;
            }
        }
    }
    function winnerName() public view
            returns (bytes32 winnerName_)
    {
        winnerName_ = proposals[winningProposal()].name;
    }
    //kill the contract
    function kill() {
        if (chairperson == msg.sender) { // 检查谁在调用
            selfdestruct(chairperson); // 销毁合约
       }
    }
    
}
</code></pre><p>实现目的：投票<br>
程序步骤：</p>
<ol>
<li>投票主席发布一份投票备选名单和智能合约，写入区块链<code>constructor</code></li>
<li>投票主席制定投票人，写入区块链<code>giveRightToVote</code></li>
<li>投票人投票，写入区块链<code>vote</code></li>
<li>*投票人可以委托他人投票（加票权）<code>delegate</code></li>
<li>所有人可以调用当前票数最高的投票提案和提案编号<code>winningProposal</code>，<code>winnerName</code></li>
<li>投票主席可以删除该合约<code>kill</code></li>
</ol>
<h4 class="mume-header" id="%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2%E5%92%8C%E8%B0%83%E7%94%A8%E5%90%88%E7%BA%A6">多节点部署和调用合约</h4>

<h5 class="mume-header" id="%E6%8A%95%E7%A5%A8%E4%B8%BB%E5%B8%AD%E5%8F%91%E5%B8%83%E4%B8%80%E4%BB%BD%E6%8A%95%E7%A5%A8%E5%A4%87%E9%80%89%E5%90%8D%E5%8D%95%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%86%99%E5%85%A5%E5%8C%BA%E5%9D%97%E9%93%BE">投票主席发布一份投票备选名单和智能合约，写入区块链</h5>

<p>开启三个节点，具体步骤详见<br>
<a href="https://junmingke.github.io/WeeklyReport/htmlReport/html/0804.htm">https://junmingke.github.io/WeeklyReport/htmlReport/html/0804.htm</a></p>
<pre data-role="codeBlock" data-info="" class="language-"><code>geth --datadir "./chain" console 2&gt;&gt;eth_output.log 
--dev.period 0 --rpc --rpcaddr "127.0.0.1" 
--rpcport "8547" --rpcapi "db,eth,net,web3,personal"

geth --datadir "./chain2" console 2&gt;&gt;eth_output2.log 
--dev.period 0 --rpc --rpcaddr "127.0.0.1" 
--rpcport "8548" --rpcapi "db,eth,net,web3,personal" --port 30306

geth --datadir "./chain3" console 2&gt;&gt;eth_output3.log 
--dev.period 0 --rpc --rpcaddr "127.0.0.1" 
--rpcport "8549" --rpcapi "db,eth,net,web3,personal" --port 30307
</code></pre><p>可以断网使用，不可以使用wifi。利用<code>addPeer</code>连接节点。</p>
<p>使用remix编译合约，具体步骤详见<br>
<a href="https://junmingke.github.io/WeeklyReport/htmlReport/html/0731.htm">https://junmingke.github.io/WeeklyReport/htmlReport/html/0731.htm</a></p>
<p>运行之前，定义<code>proposalNames</code></p>
<p><img src="./0805_files/WechatIMG80.jpeg" alt="image"></p>
<p>取出<code>WEB3DEPLOY</code>的代码，删除第一行的</p>
<pre data-role="codeBlock" data-info="" class="language-"><code>var proposalNames = /* var of type bytes32[] here */ ;
</code></pre><p>粘贴其他的代码放在某个节点下（主节点）运行，需要注意：运行之前需要解锁自己的账户，因为要发起交易。</p>
<p>返回一个<code>null</code>和一个二维数组，再进行挖矿操作把智能合约打包进块中：</p>
<p><img src="./0805_files/WechatIMG81.jpeg" alt="image"></p>
<h5 class="mume-header" id="%E6%8A%95%E7%A5%A8%E4%B8%BB%E5%B8%AD%E5%88%B6%E5%AE%9A%E6%8A%95%E7%A5%A8%E4%BA%BA%E5%86%99%E5%85%A5%E5%8C%BA%E5%9D%97%E9%93%BE">投票主席制定投票人，写入区块链</h5>

<p>由于主席已经自然的拥有一票，<code>voters[chairperson].weight = 1;</code>，因此只需要去其他两个节点（副节点）查看<code>web3.eth.accounts[0]</code>，在主节点指定投票方即可，因为需要写入区块链的，所以需要调用<code>sendTransaction</code>。</p>
<p><img src="./0805_files/WechatIMG82.jpeg" alt="image"></p>
<p>同样的，执行挖矿操作使交易生效。</p>
<h5 class="mume-header" id="%E6%8A%95%E7%A5%A8%E4%BA%BA%E6%8A%95%E7%A5%A8%E5%86%99%E5%85%A5%E5%8C%BA%E5%9D%97%E9%93%BE">投票人投票，写入区块链</h5>

<p>首先在主节点投票给<code>2</code>:<code>YD</code>，挖矿（写入区块链）后，查看当前的<code>winningProposal</code>和<code>winner</code>。</p>
<p><img src="./0805_files/WechatIMG83.jpeg" alt="image"></p>
<p>再利用两个副节点给<code>1</code>:<code>YDD</code>投票，查看<code>winningProposal</code>和<code>winner</code>。</p>
<p>这里需要主节点首先传给两个副节点<code>abi</code>和<code>address</code>，这个需要线下完成。</p>
<pre data-role="codeBlock" data-info="" class="language-"><code>abi = [{
    constant: false,
    inputs: [{
        name: "proposal",
        type: "uint256"
    }],
    name: "vote",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
}, {
    constant: true,
    inputs: [{
        name: "",
        type: "uint256"
    }],
    name: "proposals",
    outputs: [{
        name: "name",
        type: "bytes32"
    }, {
        name: "voteCount",
        type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
}, {
    constant: true,
    inputs: [],
    name: "chairperson",
    outputs: [{
        name: "",
        type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
}, {
    constant: false,
    inputs: [],
    name: "kill",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
}, {
    constant: false,
    inputs: [{
        name: "to",
        type: "address"
    }],
    name: "delegate",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
}, {
    constant: true,
    inputs: [],
    name: "winningProposal",
    outputs: [{
        name: "winningProposal_",
        type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
}, {
    constant: false,
    inputs: [{
        name: "voter",
        type: "address"
    }],
    name: "giveRightToVote",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
}, {
    constant: true,
    inputs: [{
        name: "",
        type: "address"
    }],
    name: "voters",
    outputs: [{
        name: "weight",
        type: "uint256"
    }, {
        name: "voted",
        type: "bool"
    }, {
        name: "delegate",
        type: "address"
    }, {
        name: "vote",
        type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
}, {
    constant: true,
    inputs: [],
    name: "winnerName",
    outputs: [{
        name: "winnerName_",
        type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
}, {
    inputs: [{
        name: "proposalNames",
        type: "bytes32[]"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
}]
address ＝ "0x18d4a0e20839a5b62a2d5067a24c98b75fa7c546"
</code></pre><p>利用这两个参数就可以调用智能合约，运行步骤如下：</p>
<pre data-role="codeBlock" data-info="" class="language-"><code>ballotContract = web3.eth.contract(abi)
ballot = ballotContract.at("0x18d4a0e20839a5b62a2d5067a24c98b75fa7c546")
</code></pre><p>然后和主节点类似，解锁，投票，挖矿。</p>
<p><img src="./0805_files/WechatIMG84.jpeg" alt="image"></p>
<h5 class="mume-header" id="%E6%89%80%E6%9C%89%E4%BA%BA%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E5%BD%93%E5%89%8D%E7%A5%A8%E6%95%B0%E6%9C%80%E9%AB%98%E7%9A%84%E6%8A%95%E7%A5%A8%E6%8F%90%E6%A1%88">所有人可以调用当前票数最高的投票提案</h5>

<p>这个时候从三个节点查询<code>winningProposal</code>都可以查看到<code>1</code>为获胜的提案。</p>
<p><img src="./0805_files/WechatIMG85.jpeg" alt="image"></p>
<h5 class="mume-header" id="%E6%8A%95%E7%A5%A8%E4%B8%BB%E5%B8%AD%E5%8F%AF%E4%BB%A5%E5%88%A0%E9%99%A4%E8%AF%A5%E5%90%88%E7%BA%A6kill">投票主席可以删除该合约<code>kill</code></h5>

<p>这里我再看看，有点不太对。</p>
<h4 class="mume-header" id="%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92">下一步计划</h4>

<ol>
<li>利用P2P网络传输消息</li>
<li>部署 <a href="https://github.com/JunmingKe/anonymousvoting">https://github.com/JunmingKe/anonymousvoting</a></li>
<li><code>web3.db</code></li>
<li>gas要怎么设置</li>
<li><code>input</code>和<code>data</code>区别在哪</li>
</ol>

      </div>
      
      
    
    
    
    
    
    
    
    
  </body></html>